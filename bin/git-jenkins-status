#!/usr/bin/env bash

################################################################################
# name: git-jenkins-status
# what: git extension to quickly check Jenkins build status.
################################################################################

# copyright (c) 2013 Wil Moore III <wil.moore@wilmoore.com>

################################################################################
# NOT RECOMMENDED TO MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING!
################################################################################

# program version
VERSION=0.0.5

# run from a subdirectory
SUBDIRECTORY_OK=Yes

################################################################################
# bootstrap
################################################################################

. git-sh-setup

################################################################################
# escapes
################################################################################

GREEN="\e[0;32m"
YELLOW="\e[0;33m"
RED="\e[0;31m"
NOCOLOR="\e[0m"

################################################################################
# check configuration
################################################################################

JENKINS_USERNAME=$(git config --local --get jenkins.status.username)

if [[ $? -ne 0 ]]; then
  echo "Please set 'jenkins.status.username'"
  echo "git config --local jenkins.status.username :USERNAME"
  exit $?
fi

JENKINS_PASSWORD=$(git config --local --get jenkins.status.password)

if [[ $? -ne 0 ]]; then
  echo "Please set 'jenkins.status.password'"
  echo "git config --local jenkins.status.password :PASSWORD"
  exit $?
fi

JENKINS_URL=$(git config --local --get jenkins.status.url)

if [[ $? -ne 0 ]]; then
  echo "Please set 'jenkins.status.url'"
  echo "git config --local jenkins.status.url :URL"
  exit $?
fi

JENKINS_JOBS=$(git config --local --get-all jenkins.status.job)

if [[ $? -ne 0 || ${#JENKINS_JOBS[@]} -lt 1 ]]; then
  echo "Please set at least one 'jenkins.status.job'"
  echo "git config --local jenkins.status.job :JOB"
  exit 1
fi

################################################################################
# functions
################################################################################

function status.of()
{
  local AUTH="$JENKINS_USERNAME:$JENKINS_PASSWORD"
  local  URL="$JENKINS_URL/job/$1/api/json?tree=healthReport%5Bdescription%5D"
  local CURL=$(curl -s --user $AUTH $URL)

  # whether CURL failed or succeeded
  if [[ $? -ne 0 ]]; then
    return $?
  fi

  # parse response text for pattern: '^Build stability:'
  local DATA=$(echo $CURL | sed -e 's/[{}]/''/g' | awk -F'"' '{print $6}' | grep -E '^Build stability:')

  # whether response text parsing failed or succeeded
  if [[ -z $DATA ]]; then
    echo "Unable to retrieve status."
  fi

  echo $DATA | awk -F'(: )' '{print $NF}'
}

################################################################################
# main
################################################################################

function main()
{
  echo ""
  for jobname in ${JENKINS_JOBS[@]}; do

    echo "JOB NAME:" $jobname

    status=$(status.of $jobname)

    if   [[ $status == "No recent builds failed." ]]; then
      local COLOR=$GREEN
    elif [[ $status == "Unable to retrieve status." ]]; then
      local COLOR=$YELLOW
    else
      local COLOR=$RED
    fi

    printf "%s  : ${COLOR}%s${NOCOLOR}" "STATUS" "$status"
    echo ""
    echo ""

  done
}

main
